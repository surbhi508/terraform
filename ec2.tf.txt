provider "aws" {
  region = "ap-south-1"
  profile="surbhisahdev508"
}

resource "aws_key_pair" "deployer" {
  key_name   = "terakey"
  public_key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD3F6tyPEFEzV0LX3X8BsXdMsQz1x2cEikKDEY0aIj41qgxMCP/iteneqXSIFZBp5vizPvaoIR3Um9xK7PGoW8giupGn+EPuxIA4cDM4vzOqOkiMPhz5XK0whEjkVzTo4+S0puvDZuwIsdiW9mxhJc7tgBNL0cYlWSYVkz4G/fslNfRPW5mYAM49f4fhtxPb5ok4Q2Lg9dPKVHO/Bgeu5woMc7RY0p1ej6D4CKFE6lymSDJpW0YHX/wqE9+cfEauh7xZcG0q9t2ta6F6fmX0agvpFyZo8aFbXeUBr7osSCJNgvavWbM/06niWrOvYX2xwWdhXmXSrbX8ZbabVohBK41 email@example.com"
}
resource "aws_security_group" "allow_http" {
  name        = "allow_http"
  description = "Allow TCP inbound traffic"
  vpc_id      = "vpc-47f5e82f"

  ingress {
    description = "HTTP from VPC"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  

  ingress {
    description = "SSH from VPC"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
   egress {
     from_port  = 0
     to_port    = 0
     protocol   = "-1"
     cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "allow_http"
  }
}


resource "aws_instance" "web" {
  ami           = "ami-07a8c73a650069cf3"
  instance_type = "t2.micro"
  key_name      = "terakey"
  security_groups=[ "launch-wizard-2"]
  tags = {
    Name = "teralaunchos"
  }
}

output   "avzone" {
         value  = aws_instance.web.availability_zone
}
resource "aws_ebs_volume" "example" {
  availability_zone = aws_instance.web.availability_zone
  size              = 1

  tags = {
    Name = "teravol"
  }
}

output   "volid" {
         value=  aws_ebs_volume.example.id
}
resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.example.id
  instance_id = aws_instance.web.id

}
resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.example.id
  instance_id = aws_instance.web.id

}
resource "null_resource" "ternull" {
 
  # Bootstrap script can run on any instance of the cluster
  # So we just choose the first in this case
  connection {
     type  = "ssh"
     user  = "ec2-user"
     private_key = file("C:/Users/SURBHI/Downloads/sshkey.pem")
     host        = aws_instance.web.public_ip
  }
    

  provisioner "remote-exec" {
       inline = [
      "sudo mkfs.extf4  /dev/xvdh",
      "sudo mount /dev/xvdh  /var/www/html",
      "sudo rm -rf /var/www/html/",
      "sudo git clone https://github.com/surbhi508/terraform.git /var/www/html/"
   ]
  }

}



resource "aws_s3_bucket" "bucket" {
  bucket  = "udpr5"
  force_destroy = true
 versioning {
     enabled = true
  }
 grant {
     type     = "Group"
     permissions = ["READ"]
     uri = "http://acs.amazonaws.com/groups/global/AllUsers"
}
  tags = {
     Name   = "terrabucket"
     Environment = "Dev"
 }
}


resource "aws_s3_bucket_object" "object" {
  bucket = "udpr5"
  key    = "new_object_key"
  source = "C:/Users/SURBHI/Pictures/Screenshot_20190102-140206.png"
  acl   = "public-read"
  # The filemd5() function is available in Terraform 0.11.12 and later
  # For Terraform 0.11.11 and earlier, use the md5() function and the file() function:
  # etag = "${md5(file("path/to/file"))
 
}

resource "aws_cloudfront_origin_access_identity" "origin_access_identity" {
  comment =  "origin-access-identity/cloudfront/ABCDEFG1234567"
}

resource "aws_cloudfront_distribution" "s3_distribution" {
  origin {
    domain_name = aws_s3_bucket.bucket.bucket_regional_domain_name
    origin_id   = "s3-bucket-bucket"
     s3_origin_config {
      origin_access_identity = "origin-access-identity/cloudfront/ABCDEFG1234567"
    }
    
  }

  enabled             = true
  is_ipv6_enabled     = true
  comment             = "Some comment"
  default_root_object = "index.html"

  logging_config {
    include_cookies = false
    bucket          = "mylogs.s3.amazonaws.com"
    prefix          = "myprefix"
  }

  aliases = ["mysite.example.com", "yoursite.example.com"]

  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "s3-bucket-bucket"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }
ordered_cache_behavior {
    path_pattern     = "/content/immutable/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD", "OPTIONS"]
    target_origin_id = "s3-bucket-bucket"

    forwarded_values {
      query_string = false
      headers      = ["Origin"]

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 86400
    max_ttl                = 31536000
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }
  ordered_cache_behavior {
    path_pattern     = "/content/*"
    allowed_methods  = ["GET", "HEAD", "OPTIONS"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = "s3-bucket-bucket"

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
    compress               = true
    viewer_protocol_policy = "redirect-to-https"
  }

  price_class = "PriceClass_200"

  restrictions {
    geo_restriction {
      restriction_type = "whitelist"
      locations        = ["US", "CA", "GB", "DE"]
    }
  }

  tags = {
    Environment = "production"
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}





  
